CLASS zcl_mwscan_client DEFINITION PUBLIC.
* Auto generated by https://github.com/abap-openapi/abap-openapi
* Title: SAP Malware Scanning Service
* Description: Use SAP Malware Scanning service to scan business documents for malware.
* Version: 1.0
  PUBLIC SECTION.
    INTERFACES zif_mwscan_interface.
    METHODS constructor
      IMPORTING
        ii_client        TYPE REF TO if_http_client
        iv_uri_prefix    TYPE string OPTIONAL
        it_extra_headers TYPE tihttpnvp OPTIONAL
        iv_timeout       TYPE i DEFAULT if_http_client=>co_timeout_default.
  PROTECTED SECTION.
    DATA mi_client        TYPE REF TO if_http_client.
    DATA mv_timeout       TYPE i.
    DATA mv_uri_prefix    TYPE string.
    DATA mt_extra_headers TYPE tihttpnvp.
ENDCLASS.

CLASS zcl_mwscan_client IMPLEMENTATION.
  METHOD constructor.
    " Use cl_http_client=>create_by_destination() or cl_http_client=>create_by_url() to create the client
    " the caller must close() the client
    mi_client = ii_client.
    mv_timeout = iv_timeout.
    mv_uri_prefix = iv_uri_prefix.
    mt_extra_headers = it_extra_headers.
  ENDMETHOD.

  METHOD zif_mwscan_interface~scans_a_file_for_malware_.
    DATA lv_code         TYPE i.
    DATA lv_uri          TYPE string.
    DATA ls_header       LIKE LINE OF mt_extra_headers.
    DATA lv_dummy        TYPE string.
    DATA lv_content_type TYPE string.

    mi_client->propertytype_logon_popup = if_http_client=>co_disabled.
    mi_client->request->set_method( 'POST' ).
    lv_uri = mv_uri_prefix && '/scan'.
    cl_http_utility=>set_request_uri(
      request = mi_client->request
      uri     = lv_uri ).
    LOOP AT mt_extra_headers INTO ls_header.
      mi_client->request->set_header_field(
        name  = ls_header-name
        value = ls_header-value ).
    ENDLOOP.
    mi_client->request->set_data( '112233AABBCCDDEEFF' ).
    mi_client->send( mv_timeout ).
    mi_client->receive( ).

    lv_content_type = mi_client->response->get_content_type( ).
    mi_client->response->get_status( IMPORTING code = lv_code ).
    CASE lv_code.
      WHEN '200'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_200_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '401'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_401_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '413'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_413_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '415'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_415_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '429'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_429_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '503'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_503_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN OTHERS.
* todo, error handling
    ENDCASE.

  ENDMETHOD.

  METHOD zif_mwscan_interface~returns_information_about_th.
    DATA lv_code         TYPE i.
    DATA lv_uri          TYPE string.
    DATA ls_header       LIKE LINE OF mt_extra_headers.
    DATA lv_dummy        TYPE string.
    DATA lv_content_type TYPE string.

    mi_client->propertytype_logon_popup = if_http_client=>co_disabled.
    mi_client->request->set_method( 'GET' ).
    lv_uri = mv_uri_prefix && '/info'.
    cl_http_utility=>set_request_uri(
      request = mi_client->request
      uri     = lv_uri ).
    LOOP AT mt_extra_headers INTO ls_header.
      mi_client->request->set_header_field(
        name  = ls_header-name
        value = ls_header-value ).
    ENDLOOP.
    mi_client->send( mv_timeout ).
    mi_client->receive( ).

    lv_content_type = mi_client->response->get_content_type( ).
    mi_client->response->get_status( IMPORTING code = lv_code ).
    CASE lv_code.
      WHEN '200'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_200_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN '401'.
        SPLIT lv_content_type AT ';' INTO lv_content_type lv_dummy.
        CASE lv_content_type.
          WHEN 'application/json'.
            /ui2/cl_json=>deserialize(
              EXPORTING json = mi_client->response->get_cdata( )
              CHANGING data = return-_401_app_json ).
          WHEN OTHERS.
* unexpected content type
        ENDCASE.
      WHEN OTHERS.
* todo, error handling
    ENDCASE.

  ENDMETHOD.

ENDCLASS.